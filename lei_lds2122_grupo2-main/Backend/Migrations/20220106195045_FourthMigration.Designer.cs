// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220106195045_FourthMigration")]
    partial class FourthMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Data.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Backend.Data.Models.Comment", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Backend.Data.Models.FavoriteRoute", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.HasKey("UserName", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("FavoriteRoutes");
                });

            modelBuilder.Entity("Backend.Data.Models.Follow", b =>
                {
                    b.Property<string>("Follower")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Followed")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Follower", "Followed");

                    b.HasIndex("Followed");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("Backend.Data.Models.InterestedPlace", b =>
                {
                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaceId", "UserName");

                    b.HasIndex("UserName");

                    b.ToTable("InterestedPlaces");
                });

            modelBuilder.Entity("Backend.Data.Models.Period", b =>
                {
                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OpenDay")
                        .HasColumnType("int");

                    b.Property<string>("OpenTime")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CloseDay")
                        .HasColumnType("int");

                    b.Property<string>("CloseTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceId", "OpenDay", "OpenTime");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("Backend.Data.Models.Place", b =>
                {
                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AverageVisitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60);

                    b.Property<string>("BusinessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("UserRatingsTotal")
                        .HasColumnType("int");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Backend.Data.Models.PlaceCategory", b =>
                {
                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaceId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PlaceCategories");
                });

            modelBuilder.Entity("Backend.Data.Models.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Backend.Data.Models.RouteEvaluation", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long>("Evaluation")
                        .HasColumnType("bigint");

                    b.HasKey("UserName", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteEvaluations");
                });

            modelBuilder.Entity("Backend.Data.Models.RoutePlace", b =>
                {
                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PlaceId", "StartTime", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("RoutePlaces");
                });

            modelBuilder.Entity("Backend.Data.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrivateProfile")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Data.Models.VisitedPlace", b =>
                {
                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaceId", "UserName");

                    b.HasIndex("UserName");

                    b.ToTable("VisitedPlaces");
                });

            modelBuilder.Entity("Backend.Data.Models.VisitedRoute", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserName", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("VisitedRoutes");
                });

            modelBuilder.Entity("Backend.Data.Models.Comment", b =>
                {
                    b.HasOne("Backend.Data.Models.Route", "Route")
                        .WithMany("Comments")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.FavoriteRoute", b =>
                {
                    b.HasOne("Backend.Data.Models.Route", "Route")
                        .WithMany("FavoriteRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("FavoriteRoutes")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.Follow", b =>
                {
                    b.HasOne("Backend.Data.Models.User", "UserFollowed")
                        .WithMany("Followed")
                        .HasForeignKey("Followed")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "UserFollower")
                        .WithMany("Follow")
                        .HasForeignKey("Follower")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserFollowed");

                    b.Navigation("UserFollower");
                });

            modelBuilder.Entity("Backend.Data.Models.InterestedPlace", b =>
                {
                    b.HasOne("Backend.Data.Models.Place", "Place")
                        .WithMany("InterestedPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("InterestedPlaces")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.Period", b =>
                {
                    b.HasOne("Backend.Data.Models.Place", "Place")
                        .WithMany("Periods")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Backend.Data.Models.PlaceCategory", b =>
                {
                    b.HasOne("Backend.Data.Models.Category", "Category")
                        .WithMany("PlaceCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Place", "Place")
                        .WithMany("Categories")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Backend.Data.Models.Route", b =>
                {
                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("Routes")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.RouteEvaluation", b =>
                {
                    b.HasOne("Backend.Data.Models.Route", "Route")
                        .WithMany("RouteEvaluations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("RouteEvaluations")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.RoutePlace", b =>
                {
                    b.HasOne("Backend.Data.Models.Place", "Place")
                        .WithMany("RoutePlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Route", "Route")
                        .WithMany("Places")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Backend.Data.Models.VisitedPlace", b =>
                {
                    b.HasOne("Backend.Data.Models.Place", "Place")
                        .WithMany("VisitedPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("VisitedPlaces")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.VisitedRoute", b =>
                {
                    b.HasOne("Backend.Data.Models.Route", "Route")
                        .WithMany("RouteVisited")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.User", "User")
                        .WithMany("VisitedRoutes")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.Category", b =>
                {
                    b.Navigation("PlaceCategories");
                });

            modelBuilder.Entity("Backend.Data.Models.Place", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("InterestedPlaces");

                    b.Navigation("Periods");

                    b.Navigation("RoutePlaces");

                    b.Navigation("VisitedPlaces");
                });

            modelBuilder.Entity("Backend.Data.Models.Route", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteRoutes");

                    b.Navigation("Places");

                    b.Navigation("RouteEvaluations");

                    b.Navigation("RouteVisited");
                });

            modelBuilder.Entity("Backend.Data.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteRoutes");

                    b.Navigation("Follow");

                    b.Navigation("Followed");

                    b.Navigation("InterestedPlaces");

                    b.Navigation("RouteEvaluations");

                    b.Navigation("Routes");

                    b.Navigation("VisitedPlaces");

                    b.Navigation("VisitedRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
